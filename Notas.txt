JS es un lenguaje interpretado que nos permite trabajar tanto como sistema web
como aplicaciones que van a correr del lado del servidor .
¿Qué son las variables? Las variables son espacios de memoria donde colocamos datos.

Hola mundo en JS
console.log("Hola Mundo");
Se abre la terminal se escribe node , luego el nombre del programa 
se da Enter y corre el Hola Mundo 

JavaScript es un lenguaje sensible a mayusculas y minisculas
Hay que tener cuidado con lo que uno escribe en sus variables 
Iniciar con letra minúscula, cada nueva palabra inicia con mayúscula y no usar caracteres especiales.

Conversion de TIpos de datos 
En el codigo 04 Se encuentran ahi los tipos de datos. 

Funciones para convertir los digitos 
parseInt Hace que lo que este entre parentesis se convierta en numero entero 
parseFloat Hace que lo que este entre parentesis se convierta en numero flotante

Ahora que ya vimos las diferentes forma de declarar variables y cómo es su forma de uso, podemos afirmar que:

Toda vez que declaramos una variable, estamos reservando espacio de memoria del computador.
Exactamente, una variable sirve como un nombre, una dirección para ese espacio en memoria del computador.

Sobreescribir el valor de una variable es cambiar el contenido de ella. Para eso necesitamos hacer uso del operador (=),
con el cual asignamos el nuevo valor que va a contener.
Recordando que eso es posible de hacer sólo en variables que no hayan sido declaradas con la palabra reservada const

Existen diferentes tipos de datos que podemos gestionar, tal como textos y números.
Otra forma de llamar a las variables tipo texto es strings. 

OPERADORES LOGICOS 

De las afirmaciones que siguen relacionadas con los operadores lógicos utilizados en Javascript. Cuales de ellas son 
verdaderas.

El operador lógico AND se representa en el código por los caracteres && y el operador lógico OR por ||.
AND es representado por && y OR por ||.

Los operadores lógicos deben tener tanto para el lado izquierdo como para el lado derecho expresiones booleanas.

if (edadComprador >= 18 && edadComprador < 30) {

}
Note que del lado izquierdo del operador && hay una condición lógica o booleana que retorna verdadero o falso y del 
lado derecho sucede lo mismo.

En la expresión condicional del while es posible utilizar cualquier operador de comparación (< [menor], 
> [mayor], <= [menor o igual], >= [mayor o igual], == [igual a] y != [diferente de]) además de cualquier operador lógico 
(&& [y], || [o]).
Así es. Todos los operadores lógicos y de comparación son válidos, pues todos ellos se pueden usar en expresiones 
condicionales. Recuerda que puedes combinarlos para validar condiciones complejas.

El lazo while necesita siempre de una expresión condicional que define el punto en que el lazo será interrumpido.
Recuerda que es condición debe estar colocada entre paréntesis. La condición puede definirse de acuerdo a los operadores 
lógicos estudiados anteriormente.
-----------------------------------------------
Hoisting
En JavaScript, cada variable es "elevada" (hoisting) a la parte superior de su contexto de ejecución. Este mecanismo 
mueve las variables a la parte superior de su alcance antes de que se ejecute el código.

En nuestro ejemplo anterior, como la variable mensaje está dentro de una función, su declaración se eleva (alzando) a la 
parte superior de su contexto, es decir, a la parte superior de la función.

Es por esta misma razón que "es posible usar una variable antes de que se haya declarado": en tiempo de ejecución, la 
variable se elevará (hoisting) y todo funcionará correctamente.

VAR
En el caso de la palabra clave var, además de la variable que se iza(hoisting), se inicializa automáticamente con el 
valor indefinido (si no se asigna ningún otro valor).

let
Fue pensando en traer el alcance de bloque (tan conocido en otras lenguajes) que ECMAScript 6 tenía la intención de 
proporcionar la misma flexibilidad (y uniformidad) para el lenguaje.
Tenga en cuenta que cuando intentamos acceder a una variable que ha sido declarada usando la palabra clave let dejada 
fuera de su alcance, se presentó el error Uncaught ReferenceError: scopeBlock no está definido.

Por lo tanto, podemos usar let sin problemas, ya que el alcance de bloque está garantizado.

const
Aunque let garantiza el alcance, todavía existe la posibilidad de declarar una variable con let y ella ser undifined. 
Al igual que las variables declaradas con la palabra clave let, las constantes también tienen un alcance de bloque.